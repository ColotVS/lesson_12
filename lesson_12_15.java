public class lesson_12_15 {
    //Особенности статических классов

    //Статические внутренние классы меньше всего стоило бы называть статическими.
    //Они ведут себя точно так же, как обычные классы. Никаких ограничений на обращение к ним из нестатических методов нет.
    //Если вы работаете с внутренним статическим классом внутри его класса-родителя, вообще не заметите никакой разницы с тем,
    //если бы этот внутренний класс был бы самым обычным классом (не вложенным и не статическим).

    //Если вы возьмете какой-то вложенный статический класс и вынесете его из его класса родителя, все, что изменится,
    //так это то, что новый класс потеряет способность обращаться к private static переменным и методам бывшего класса-родителя.

    //Главное отличие вложенного статического класса от обычного класса.
    //Методы вложенного статического класса имеют доступ ко всем статическим переменным и методам своего класса родителя,
    //даже если те объявлены private.
    //Ну а если разобраться, что тут удивительного? Модификатор private прямо говорит, что к переменным и методам,
    //обозначенным этим модификатором, можно обращаться только изнутри их класса.
    //Внутренний статический класс находится внутри класса-родителя? Да, тогда никаких проблем: обращайтесь сколько хотите.

    //В классе Outer есть внутренний (Inner) и вложенный (Nested) классы.
    //В методе main класса lesson_12_15 создай по одному объекту каждого из них.
    public static void main(String[] args) {
        Outer outer = new Outer();                  //создаем объект внешнего класса
        Outer.Nested nested = new Outer.Nested();   //создание объекта статического вложенного класса
        Outer.Inner inner = outer.new Inner();      //создаем объект внутреннего класса с помощью объекта внешнего класса

        //Вы не можете создать объект внутреннего класса Inner без создания объекта внешнего класса Outer.
        //Внутренний класс связан с экземпляром внешнего класса и не может существовать без него.
        //Для того, чтобы создать объект внутреннего класса,
        //вам нужно сначала создать объект внешнего класса и затем использовать его для создания объекта внутреннего класса.
    }

}

class Outer {
    class Inner {
        Inner() {
            System.out.println("Создание объекта внутреннего класса");
        }
    }
    static class Nested {
        Nested() {
            System.out.println("Создание объекта вложенного класса");
        }
    }
}
